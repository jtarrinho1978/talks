/*global bc:true*/
/*jshint indent:2, browser: true, white: false devel:true undef:false*/

/**
 * All Brightcove application components should inherit from this Component class.  Component provides the necessary functions
 * needed to successfully ingest into the Brightcoe application studio.
 *
 * @constructor
 * @param element The element that is associated with this component.  This is the element that has the data-bc-component-type attribute
 * on it.
 * @param name The name of the component.  This is typically the same as the type of the component.
 * @return A new Component.
 *
 * 
 * @requires jquery-1.5.min.js
 * @requires brightcove.mobile.core.js
 */
var Component = ( function( $, undefined ) {
  function Component( element, name ) {
    /** The element that is associated with this component.  Note that the element will always be a jQuery element. */
    this.element = $( element );
    /** The name of the component that is associated with this instance of the component. */
    this.name = name;
    /**  
     * The unique ID for this component.  This it generated by the Brightcove studio at publish time or a unique number if we are in template mode.  
     * (Have not been ingested in the Brightcove application studio) 
     */
    this.id = this.id || $( element ).attr( "data-bc-component-id" ) || ( "generated-" + bc.utils.uniqueID() + "-" + this.name );
    /** <b>( Optional )</b> The style configurations exposed to the Brightcove studio that can be set.  Default is an empty object.*/
    this.styleConfig = {};
    /** <b>( Optional )</b> The data configurations exposed to the Brightcove studio for this component.  Default is an empty object.*/
    this.dataConfig = {};
    /** <b>( Optional )</b> The settings configurations exposed to the Brightcove studio for a component.  Default is an empty object. */
    this.settingConfig = {};
    /**
     * <b>( Optional )</b> object that provides additional meta-data used to override default labels in the Brightcove App Cloud studio. The possible values are:<br>
     * dataConfigDisplayName - The label to show on the button used for databinding.<br>
     * sectionName - The label to show for this section.<br>
     * dataConnector - If there is a custom connector for this component it would be set here.  (unusual)<br>
     * @example 
     this.metaData { dataConfigDisplayName: "Add Videos", 
       sectionName: 'videos',
       dataConnector: "Brightcove"
     };
     */
     this.metaData = {};
    
    /** 
     * <b>( Optional )</b> The ID for the name feed that was setup for this component in the Brightcove application studio.  A name feed allows a developer
     * to setup their content and use it during development.  A named feed represents the actual data that your application will use when 
     * deployed.
     */
    this.namedFeed = undefined;
    // register with BC.js
    bc.components[this.id] = this;
  }
  
  /**
   * During template ingestion the server calls this to pull out the settings.
   * @private
   */
  Component.prototype.getSettingConfig = function() {
    return this.settingConfig;
  };

  /**
   * During template ingestion the server calls this to pull out the styles.
   * @private
   */
  Component.prototype.getStyleConfig = function() {
    return this.styleConfig;
  };
  
  /**
   * During template ingestion the server calls this to pull out the data configurations.
   * @private
   */
  Component.prototype.getDataConfig = function() {
    return this.dataConfig;
  };
  
  Component.prototype.stopPage = function( evt ) {
    evt.preventDefault();
  };
  
  /**
   * Applies the styles that are set in the Brightcove App Cloud studio to the elements.
   *
   * @param styles A JSON object that are the styles for this component.  This object is passed as a data
   * parameter to the bc:newconfiguration event fired on the component object.
   *
   @example 
   //From within a component.  Therefore 'this' is a component.
   this.bind( "bc:newconfiguration", function( data ) {
     this.applyStyles( data.styles ); //The new styles, such as background colors are now applied.
   });
   */
  Component.prototype.applyStyles = function( styles ) {
    var $styleElement,
        cssString = "",
        styles = styles || bc.core.getStyles( this );
    
    for(var className in styles) {
      //We are setting the !important tag in order to override any specificity issues since we KNOW this is the style we want.
      if( styles[className].value ) {
        cssString += "." + className + this.id + " { " + styles[className].type + ":" + styles[className].value + " !important; } \n";
      }
    }
    
    //Remove any existing stylesheets we have injected
    $( "." + this.id + "-injected-style" ).remove();
    
    $styleElement = $( "<style>" ).attr( "type", "text/css" )
                                  .addClass( this.id + "-injected-style injected-style" )
                                  .html( cssString )
                                  .appendTo( "head" );      
  };
  
  return Component;

})( bc.lib.jQuery );
